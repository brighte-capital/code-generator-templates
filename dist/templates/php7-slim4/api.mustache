<?php

declare(strict_types=1);

namespace {{apiPackage}};

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class {{classname}}
{
    protected \Psr\Container\ContainerInterface $container;

    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }
    {{#operations}}
    {{#operation}}

{{=<% %>=}}
    /**
     * <%summary%>
     *
     * @OA\<%httpMethod%>(
     *     path="<%path%>",
     *     operationId="<%operationId%>",
     *     description="<%notes%>",
     *     tags={<%#tags%>"<%name%>"<%/tags%>}<%#hasAuthMethods%>,
     *     security={<%#authMethods%>{"<%name%>": {<%#scopes%>"<%scope%>"<%#hasMore%>, <%/hasMore%><%/scopes%>}}<%/authMethods%>}<%/hasAuthMethods%><%#responses%>,
     *     @OA\Response(
     *         response="<%code%>"<%#schema%>,<%#$ref%>
     *         ref="<%$ref%>",<%/$ref%><%^$ref%>,
     *         description="<%responseDescription%>"
     *         @OA\JsonContent(
     *             type="<%type%>"<%#items%>,
     *             @OA\Items(ref="<%$ref%>")<%/items%>
     *         )<%/$ref%>
<%/schema%>
<%^schema%>

<%/schema%>
     *     )<%/responses%>
<%^responses%>

<%/responses%>
     * )
<%={{ }}=%>
{{#hasQueryParams}}
     * @param \Psr\Http\Message\ServerRequestInterface $request Request
{{/hasQueryParams}}
     * @param \Psr\Http\Message\ResponseInterface $response Response
{{#hasPathParams}}
     * @param (int|string|float)[] $args Path arguments
{{/hasPathParams}}
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function {{operationId}}(
{{#hasQueryParams}}
        ServerRequestInterface $request,
{{/hasQueryParams}}
{{#hasBodyParam}}
        ServerRequestInterface $request,
{{/hasBodyParam}}
        ResponseInterface $response{{#hasPathParams}},
        array $args
{{/hasPathParams}}{{^hasPathParams}}
{{/hasPathParams}}
    ): ResponseInterface
    {
        {{#hasHeaderParams}}
        $headers = $request->getHeaders();
        {{#headerParams}}
        ${{paramName}} = $request->hasHeader('{{baseName}}') ? $headers['{{baseName}}'] : null;
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasPathParams}}
        {{#pathParams}}
        ${{paramName}} = $args['{{baseName}}'];
        {{/pathParams}}
        {{/hasPathParams}}
        {{#hasQueryParams}}
        $queryParams = $request->getQueryParams();
        {{#queryParams}}
        ${{paramName}} = (key_exists('{{baseName}}', $queryParams)) ? $queryParams['{{baseName}}'] : null;
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasFormParams}}
        $body = $request->getParsedBody();
        {{#formParams}}
        {{^isFile}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isFile}}
        {{#isFile}}
        {{#isMultipart}}
        ${{paramName}} = (key_exists('{{baseName}}', $request->getUploadedFiles())) ? $request->getUploadedFiles()['{{baseName}}'] : null;
        {{/isMultipart}}
        {{^isMultipart}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isMultipart}}
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        {{#hasBodyParam}}
        $body = $request->getParsedBody();
        {{/hasBodyParam}}
        $message = 'How about implementing {{nickname}} as a {{httpMethod}} method in {{apiPackage}}\{{userClassname}} class?';

        $response->getBody()->write($message);

        return $response->withStatus(501);
    }
    {{/operation}}
    {{/operations}}
}
